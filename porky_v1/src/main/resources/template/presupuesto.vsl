<!-- presupuesto.vsl -->

<!DOCTYPE html>
<html lang="es">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <title>Formulario de Solicitud de Presupuesto</title>

    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css" rel="stylesheet"/>
    <!-- Add this to the head section of your HTML -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css"
        integrity="sha384-c4FJzN6ZNqCkXgNG10oXVZlfbU50W47p3F5FkjZa3f3CpebuZrsjSdrhv0z68EN4" crossorigin="anonymous"/>


    <style>
        body {
            --red-crayola: #ee2255;
            --french-rose: #ee4477;
            --french-rose-2: #ee5588;
            --rose-pompadour: #ee7799;
            --bakermiller-pink: #ff99bb;
            --carnation-pink: #ffaacc;
            --mimi-pink: #ffddee;
            padding: 20px;
            background: var(--mimi-pink);
            /* Light flat background color */
            color: var(--red-crayola);
            /* Contrasting title color */
        }

        #productTableHead {
            background-color: var(--french-rose);
            /* Darker color for table header */
            color: white;
        }

        .form-container {
            margin-top: 20px;
        }

        button i {
            color: #333 !important;
        }

        /* Rounded corners for the delete button */
        button {
            background-color: var(--rose-pompadour) !important;
            border: 1px solid var(--rose-pompadour) !important;
            border-radius: 5px;
            /* Adjust the value for more or less rounding */
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
            /* Optional: Add a subtle shadow */
        }

        /* Remove the outline */
        button:focus {
            outline: none !important;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
            /* Optional: Add a subtle shadow on focus */
        }

        /* Placeholder color with stronger contrast */
        ::placeholder {
            color: var(--rose-pompadour);
            opacity: 1;
            /* Full opacity */
        }
    </style>
    <script>
        var productDataJson = "$!productDataJson"; // Assuming productDataJson is the JSON string
        var productData = JSON.parse(productDataJson);

        var availableOptions = [
            #foreach($productId in $productData.keySet())
                #set($product = $productData.get($productId))
                { id: $productId, name: "$!product.getNombre()", category: "$!product.getNombre().substring(0, 1).toUpperCase()", ordered: false },
            #end
        ];


        function addProduct() {
            // Get selected product details
            var selectedOption = document.getElementById("productSelect").options[document.getElementById("productSelect").selectedIndex];
            var productId = selectedOption.value;
            var productName = selectedOption.text;

            // Get the quantity value
            var quantityInput = document.getElementById("quantityInput");
            var quantity = quantityInput.value;

            // Create a new row in the table
            var table = document.getElementById("productTable");
            var tbody = table.querySelector('tbody');
            var newRow = tbody.insertRow();

            // Add cells to the new row
            var productNameCell = newRow.insertCell(0);
            var quantityCell = newRow.insertCell(1);
            var deleteCell = newRow.insertCell(2);

            // Set the content of the cells
            productNameCell.innerHTML = '<input type="text" value="' + productName + '" name="products[' + productId + ']" readonly />';
            quantityCell.innerHTML = '<input type="number" value="' + quantity + '" name="products[' + productId + ']" min="1" max="50" />';
            deleteCell.innerHTML = '<button type="button" onclick="deleteProduct(this)"><i class="fas fa-trash-alt"></i></button>';

            // Remove the selected option from the dropdown
            selectedOption.remove();

            // Show the table header if it was hidden
            var tableHead = document.getElementById("productTableHead");
            if (tableHead.style.display === "none") {
                tableHead.style.display = "table-header-group";
            }
        }

        function deleteProduct(button) {
            // Delete the corresponding row
            var row = button.parentNode.parentNode;
            var productName = row.cells[0].innerHTML;

            // Find the product in the available options array based on the product name
            var product = availableOptions.find(option => option.name === productName);

            if (product) {
                // Mark the product as logically ordered
                product.ordered = true;

                // Remove the row from the table
                row.parentNode.removeChild(row);

                // Hide the table header if there are no rows
                if (document.getElementById("productTable").querySelector('tbody').rows.length === 0) {
                    document.getElementById("productTableHead").style.display = "none";
                }

                // Regenerate the content of the select
                regenerateSelect();
            } else {
                console.error('Failed to find product in the available options array.');
            }
        }

        function regenerateSelect() {
            // Remove all options and categories from the select
            var select = document.getElementById("productSelect");
            select.innerHTML = '';

            // Create a map to group options by category
            var categoryMap = new Map();

            // Sort options alphabetically and group them by category
            availableOptions.sort(function (a, b) {
                return a.name.localeCompare(b.name);
            }).forEach(function (option) {
                if (!categoryMap.has(option.category)) {
                    categoryMap.set(option.category, []);
                }
                categoryMap.get(option.category).push(option);
            });

            // Regenerate the options and categories
            categoryMap.forEach(function (options, category) {
                var optgroup = document.createElement("optgroup");
                optgroup.label = category;
                select.appendChild(optgroup);

                options.forEach(function (option) {
                    var optionElement = document.createElement("option");
                    optionElement.value = option.id;
                    optionElement.text = option.name;
                    optgroup.appendChild(optionElement);
                });
            });
        }

    </script>
</head>

<body>
    <div class="container">
        <h1 class="mt-4">Formulario de Solicitud de Presupuesto</h1>

        <form action="/enviarPresupuesto" method="post" class="form-container">
            <!-- Product Dropdown, Quantity Input, and Add Product Button Container -->
            <div class="row mb-3">
                <div class="col-md-4">
                    <!-- Product Dropdown Section -->
                    <label for="productSelect" class="form-label">Selecciona un Producto:</label>
                    <select id="productSelect" class="form-select">
                        <!-- Options and categories will be dynamically added here -->
                    </select>
                </div>
                <div class="col-md-4">
                    <!-- Quantity Input -->
                    <label for="quantityInput" class="form-label">Porciones:</label>
                    <input type="number" id="quantityInput" class="form-control" value="1" min="1" max="50" />
                </div>
                <div class="col-md-4">
                    <!-- Add Product Button -->
                    <div>&nbsp;</div>
                    <button type="button" onclick="addProduct()" class="btn btn-primary mt-2">Agregar Producto</button>
                </div>
            </div>

            <!-- Product Table Section -->
            <h2>Productos Seleccionados</h2>
            <table id="productTable" class="table">
                <thead id="productTableHead" style="display:none;">
                    <tr>
                        <th>Nombre del Producto</th>
                        <th>Porciones</th>
                        <th> </th>
                    </tr>
                </thead>
                <tbody>
                    <!-- Existing products will be dynamically added here -->
                </tbody>
            </table>

            <!-- Side Notes Section -->
            <div class="mb-3">
                <label for="sideNotes" class="form-label">Notas Adicionales:</label>
                <textarea id="sideNotes" name="sideNotes" class="form-control"
                    placeholder="Ingresa notas adicionales"></textarea>
            </div>

            <!-- Delivery Date Section -->
            <div class="mb-3">
                <label for="deliveryDate" class="form-label">Fecha de Entrega:</label>
                <input type="date" id="deliveryDate" name="deliveryDate" class="form-control" value="2023-01-01">
            </div>

            <button type="submit" class="btn btn-primary">Enviar</button>
        </form>

        <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.bundle.min.js"></script>

        <script>
            // Generación inicial de opciones y categorías
            regenerateSelect();
        </script>
    </div>
</body>

</html>